{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","prueba","a","fetch","encodeURI","listadoGifs","json","data","dataNecesaria","map","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","category","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAoCeA,EAhCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,sBAAMC,SAXK,SAACC,GACZA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAOlB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBxB,SAACP,GAAD,OAChBF,EAAcE,EAAEQ,OAAOF,a,+BCXlBG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,sEAIKC,MAAM,mFAAD,OAAoFC,UAAWH,GAA/F,wCAJV,cAIfI,EAJe,gBAMAA,EAAYC,OANZ,uBAMdC,EANc,EAMdA,KAEDC,EAAgBD,EAAKE,KAAI,SAAClB,GAAD,YACzB,CACImB,GAAInB,EAAEmB,GACNC,MAAOpB,EAAEoB,MAETC,IAAG,UAAErB,EAAEsB,cAAJ,aAAE,EAAUC,iBAAiBF,QAbrB,kBAkBbJ,GAlBa,2CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBL,GAAmB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAkBlC,OACI,sBAAKI,UAAU,yCAAf,UACI,6BAAKL,IACL,qBAAKM,IAAKL,EAAKM,IAAKP,QCsBnBQ,EAAU,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAExB,EC5C2B,SAACA,GACzB,MAA0BjC,mBACtB,CACIoB,KAAM,GACNc,SAAS,IAHjB,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAfAC,qBAAU,WACNxB,EAAQoB,GACPK,MAAK,SAACC,GACJC,YAAW,WACVJ,EACI,CACIhB,KAAMmB,EACNL,SAAS,MAGf,UAGP,CAACD,IAEGE,EDoBoBM,CAAaR,GAA/BP,EAAZ,EAAON,KAAYc,EAAnB,EAAmBA,QAEhB,OACE,qCACE,6BAAKD,IACJC,GAAW,wCACZ,qBAAKL,UAAU,YAAf,SACSH,EAAOJ,KAAI,SAAClB,GAAD,OACR,cAAC,EAAD,eAA4BA,GAAVA,EAAEmB,aEdzBmB,G,KAlCM,WAIjB,MAAoC1C,mBAAS,CAAC,iBAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAeA,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACK4C,EAAWrB,KAAI,SAACW,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,aC1B9BW,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,U","file":"static/js/main.9045a783.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    \r\n    \r\n    \r\n    const changeValue = (e) => (\r\n        setInputValue(e.target.value)\r\n    )\r\n\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2) {\r\n            setCategories((cats) => [inputValue, ...cats])\r\n            setInputValue(\"\")\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={submit}>\r\n          <input type=\"text\" value={inputValue} onChange={changeValue}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n  };\r\n\r\nexport default AddCategory;","export const getGifs = async (prueba) => {\r\n\r\n   // encodeURI (prueba) lo que hace es reemplazar los espacios por %20 por ej\r\n    \r\n    let listadoGifs = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=Absxb7cpE4KisuwgZnO07FLlZqNz8kfr&q=${encodeURI (prueba)}&limit=10&offset=0&rating=g&lang=en`)\r\n    \r\n    let {data} = await listadoGifs.json()\r\n\r\n    let dataNecesaria = data.map((e)=> (\r\n        {\r\n            id: e.id,\r\n            title: e.title,\r\n            //lo va a mostrar solo si existe, es como una condición por lo que entendi (el signo de pregunta)\r\n            url: e.images?.downsized_medium.url\r\n        }\r\n    ))\r\n\r\n\r\n   return dataNecesaria;\r\n\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n    \r\n    /*\r\n    esto es si hubiese utilizado en el componente padre cuando utilizo este componente\r\n    de esta manera\r\n\r\n    console.log(props.data.id)\r\n    console.log(props.data.url)\r\n    console.log(props.data.title)\r\n    \r\n    { images.map((e)=> (\r\n                    <GifGridItem key={e.id}  data={e}\r\n    />   \r\n    ))}\r\n    */\r\n\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <h2>{title}</h2>\r\n            <img src={url} alt={title}/>\r\n        </div>\r\n    )\r\n}\r\n","/* import React, {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n    const [images, setImages] = useState([]);\r\n\r\n    //si pongo arreglo vacio como segundo parametro, se va a ejecutar solo una vez el usEffect \r\n\r\n    // Al usar este Hook, le estamos indicando a React que el componente tiene que hacer algo después de renderizarse. \r\n\r\n    useEffect(()=> {\r\n       getGifs(category)\r\n       .then((img)=> (\r\n           setImages(img)  //esto puede ser también then(setImages) porque coinicde el argumento con lo que voy a poner en la función\r\n       ))\r\n    }, [category])  //si la categoria cambia va a mandar devuelta el efecto por eso [category]\r\n\r\n\r\n\r\n\r\n    \r\n    return (\r\n      <>\r\n        <h3>{category}</h3>\r\n        <div className=\"card-grid\">\r\n               { images.map((e)=> (\r\n                    <GifGridItem key={e.id} {...e}\r\n                    //otra forma de crear las props en vez de ponerlo como argumento con un nombre mando un objeto, antes mandaba por ej data={e}, entonces cuando lo utilizaba tenía que desetructurar el elemento o llamar las props con lo que traía dentro por separado, ahora de esta manera desestructuro cada propiedad y listo.\r\n                    />   \r\n                ))}\r\n        </div>\r\n      </>\r\n    )\r\n\r\n\r\n}\r\n */\r\n\r\nimport React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n const {data:images,loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n      <>\r\n        <h3>{category}</h3>\r\n        {loading && <p>Loading</p>}\r\n        <div className=\"card-grid\">\r\n               { images.map((e)=> (\r\n                    <GifGridItem key={e.id} {...e}\r\n                    //otra forma de crear las props en vez de ponerlo como argumento con un nombre mando un objeto, antes mandaba por ej data={e}, entonces cuando lo utilizaba tenía que desetructurar el elemento o llamar las props con lo que traía dentro por separado, ahora de esta manera desestructuro cada propiedad y listo.\r\n                    />   \r\n                ))}\r\n        </div>\r\n      </>\r\n    )\r\n\r\n\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState(\r\n        {\r\n            data: [] ,\r\n            loading: true\r\n        }\r\n    )\r\n\r\n\r\n    useEffect(()=> {\r\n        getGifs(category)\r\n        .then((imgs)=> {\r\n           setTimeout(() => {\r\n            setState(\r\n                {\r\n                    data: imgs ,\r\n                    loading: false\r\n                }\r\n            ) \r\n           }, 3000);\r\n        }\r\n        )\r\n     },[category])  \r\n\r\n    return state;\r\n\r\n}","\r\nimport React, {useState} from \"react\";\r\nimport  AddCategory  from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\nimport \"./index.css\"\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //cuando utilice el setCategories, y esto cambie react renderiza nuevamente el componente y va a mostrar los cambios.\r\n\r\n    const [categories, setCategories] = useState([\"Los Simpsons\"])\r\n\r\n\r\n  /*  const handleAdd = () => (\r\n        //Dos formas de hacerlo:\r\n\r\n        //setCategories([...categories, \"X Men\"]) \r\n    \r\n        //o setCategories puede recibir un callback en el que el argumneto es el state anterior\r\n\r\n        setCategories((cats) => [...cats, \"X Men\"])\r\n        \r\n    )*/\r\n\r\n\r\n    return ( \r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories}/>\r\n        <hr/>\r\n        <ol>\r\n            {categories.map((category) => (\r\n                <GifGrid key={category} category={category}/>\r\n            ))}\r\n        </ol>\r\n\r\n        </>\r\n     );\r\n}\r\n \r\nexport default GifExpertApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpertApp from './GifExpertApp';\r\nimport './index.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <GifExpertApp />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}